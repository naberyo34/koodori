/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/elements.ts":
/*!*************************!*\
  !*** ./src/elements.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hihatPatternSelects = exports.snarePatternSelects = exports.kickPatternSelects = exports.synthPatternSelects = exports.noteGainInputs = exports.noteSelects = exports.filterQInput = exports.filterFrequencyInput = exports.filterTypeSelects = exports.noteLengthInput = exports.bpmInput = exports.waveformSelects = exports.stopButton = exports.startButton = exports.uiWrapper = exports.initializeButton = void 0;\nconst initializeButton = document.querySelector('[data-selector=initializeButton]');\nexports.initializeButton = initializeButton;\nconst uiWrapper = document.querySelector('[data-selector=uiWrapper]');\nexports.uiWrapper = uiWrapper;\nconst startButton = document.querySelector('[data-selector=startButton]');\nexports.startButton = startButton;\nconst stopButton = document.querySelector('[data-selector=stopButton]');\nexports.stopButton = stopButton;\nconst waveformSelects = document.querySelectorAll('[data-selector=waveformSelect]');\nexports.waveformSelects = waveformSelects;\nconst bpmInput = document.querySelector('[data-selector=bpmInput]');\nexports.bpmInput = bpmInput;\nconst noteLengthInput = document.querySelector('[data-selector=noteLengthInput]');\nexports.noteLengthInput = noteLengthInput;\nconst filterTypeSelects = document.querySelectorAll('[data-selector=filterTypeSelect]');\nexports.filterTypeSelects = filterTypeSelects;\nconst filterFrequencyInput = document.querySelector('[data-selector=filterFrequencyInput]');\nexports.filterFrequencyInput = filterFrequencyInput;\nconst filterQInput = document.querySelector('[data-selector=filterQInput]');\nexports.filterQInput = filterQInput;\nconst noteSelects = document.querySelectorAll('[data-selector=noteSelect]');\nexports.noteSelects = noteSelects;\nconst noteGainInputs = document.querySelectorAll('[data-selector=noteGainInput]');\nexports.noteGainInputs = noteGainInputs;\nconst synthPatternSelects = document.querySelectorAll('[data-selector=synthPatternSelect]');\nexports.synthPatternSelects = synthPatternSelects;\nconst kickPatternSelects = document.querySelectorAll('[data-selector=kickPatternSelect]');\nexports.kickPatternSelects = kickPatternSelects;\nconst snarePatternSelects = document.querySelectorAll('[data-selector=snarePatternSelect]');\nexports.snarePatternSelects = snarePatternSelects;\nconst hihatPatternSelects = document.querySelectorAll('[data-selector=hihatPatternSelect]');\nexports.hihatPatternSelects = hihatPatternSelects;\n\n\n//# sourceURL=webpack://koodori/./src/elements.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst store_1 = __importDefault(__webpack_require__(/*! ./store */ \"./src/store.ts\"));\nconst elements_1 = __webpack_require__(/*! ./elements */ \"./src/elements.ts\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\n// 初期化して使う\nlet audioCtx;\nlet masterGainNode;\nlet biquadFilterNode;\nlet kickBuffer;\nlet snareBuffer;\nlet hihatBuffer;\nlet worker;\n/**\n * 指定された時間に鳴らす音を準備し、発音を予約する\n * @param time 発音時間\n * @param synthOption シンセサイザーで鳴らす音の詳細設定\n */\nconst scheduleNote = (time, synthOption) => {\n    // シンセサイザー\n    if (store_1.default.synthPattern[store_1.default.currentNote]) {\n        const { waveform, gain, pitchName, length } = synthOption;\n        const oscNode = new OscillatorNode(audioCtx, { type: waveform });\n        const noteGainNode = new GainNode(audioCtx, { gain });\n        oscNode.frequency.value = (0, utils_1.pitchNameToFrequency)(pitchName);\n        oscNode.connect(noteGainNode);\n        noteGainNode.connect(biquadFilterNode);\n        oscNode.start(time);\n        oscNode.stop(time + length);\n    }\n    // キック\n    if (store_1.default.kickPattern[store_1.default.currentNote]) {\n        const kickNode = audioCtx.createBufferSource();\n        kickNode.buffer = kickBuffer;\n        kickNode.connect(masterGainNode);\n        kickNode.start(time);\n    }\n    // スネア\n    if (store_1.default.snarePattern[store_1.default.currentNote]) {\n        const snareNode = audioCtx.createBufferSource();\n        snareNode.buffer = snareBuffer;\n        snareNode.connect(masterGainNode);\n        snareNode.start(time);\n    }\n    // ハイハット\n    if (store_1.default.hihatPattern[store_1.default.currentNote]) {\n        const hihatNode = audioCtx.createBufferSource();\n        hihatNode.buffer = hihatBuffer;\n        hihatNode.connect(masterGainNode);\n        hihatNode.start(time);\n    }\n};\n/**\n * BPMから次の発音時間を算出\n */\nconst getNextNoteTime = () => {\n    const secondsPerBeat = 60 / store_1.default.bpm;\n    const noteTime = secondsPerBeat * 0.25;\n    store_1.default.nextNoteTime += noteTime;\n};\n/**\n * カウント(0 ~ 15)を進める\n */\nconst stepNextNote = () => {\n    store_1.default.currentNote += 1;\n    if (store_1.default.currentNote === 16) {\n        store_1.default.currentNote = 0;\n    }\n};\n/**\n * ループで定期実行される\n * (1) scheduleNoteで、直近のノート発音時間の準備\n * (2) getNextNoteTimeで、その次のノート発音時間を算出\n * (3) stepNextNoteで、カウント(0 ~ 15)を進める\n */\nconst scheduler = () => {\n    const scheduleAheadTime = 0.1;\n    while (store_1.default.nextNoteTime < audioCtx.currentTime + scheduleAheadTime) {\n        const secondsPerBeat = 60 / store_1.default.bpm;\n        const noteTime = secondsPerBeat * 0.25;\n        scheduleNote(store_1.default.nextNoteTime, {\n            waveform: store_1.default.currentWaveform,\n            gain: store_1.default.noteGain[store_1.default.currentNote] * 0.1,\n            pitchName: store_1.default.phrase[store_1.default.currentNote],\n            length: noteTime * store_1.default.noteLength * 0.1,\n        });\n        getNextNoteTime();\n        stepNextNote();\n    }\n};\n/**\n * オーディオファイルをAudioBufferに変換し、Audio APIで利用できるようにして返す\n * @param samplePath オーディオファイルのパス\n * @returns AudioBuffer\n */\nconst setupSample = (samplePath) => __awaiter(void 0, void 0, void 0, function* () {\n    const response = yield fetch(samplePath);\n    const arrayBuffer = yield response.arrayBuffer();\n    const audioBuffer = yield audioCtx.decodeAudioData(arrayBuffer);\n    return audioBuffer;\n});\n/**\n * ドラムの初期化\n */\nconst initializeDrums = () => __awaiter(void 0, void 0, void 0, function* () {\n    const kick = yield setupSample('assets/audio/kick.wav');\n    const snare = yield setupSample('assets/audio/snare.wav');\n    const hihat = yield setupSample('assets/audio/hihat.wav');\n    kickBuffer = kick;\n    snareBuffer = snare;\n    hihatBuffer = hihat;\n});\n/**\n * オーディオ周りの初期化\n * 以下のようにconnectする\n * [フィルター (biquadFilterNode)]->[全体ボリューム (masterGainNode)]->[出力 (audioCtx.destination)]\n */\nconst initializeAudio = () => {\n    audioCtx = new AudioContext();\n    biquadFilterNode = new BiquadFilterNode(audioCtx, {\n        type: store_1.default.currentFilter,\n        frequency: store_1.default.filterFrequency,\n        Q: store_1.default.filterQ,\n    });\n    masterGainNode = new GainNode(audioCtx);\n    biquadFilterNode.connect(masterGainNode);\n    masterGainNode.connect(audioCtx.destination);\n};\n/**\n * Workerの初期化\n */\nconst initializeWorker = () => {\n    const lookahead = 25.0;\n    worker = new Worker('assets/js/audioworker.js');\n    worker.onmessage = (e) => {\n        if (e.data === 'tick') {\n            scheduler();\n        }\n    };\n    worker.postMessage({ interval: lookahead });\n};\n// 以下、ユーザー操作時に発火する関数\n/**\n * 初期化ボタン\n * note: Web Audio APIの利用時は、「はじめる」ボタン等を用いて\n * ユーザーが再生を許可してから初期化を行うのが望ましい。\n * see: https://developer.mozilla.org/ja/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\n */\nconst handleInitialize = () => __awaiter(void 0, void 0, void 0, function* () {\n    const activeClass = '--active';\n    initializeAudio();\n    initializeDrums();\n    initializeWorker();\n    store_1.default.initialized = true;\n    elements_1.initializeButton === null || elements_1.initializeButton === void 0 ? void 0 : elements_1.initializeButton.classList.remove(activeClass);\n    elements_1.uiWrapper === null || elements_1.uiWrapper === void 0 ? void 0 : elements_1.uiWrapper.classList.add(activeClass);\n});\nconst handleStart = () => {\n    if (store_1.default.playing)\n        return;\n    store_1.default.currentNote = 0;\n    store_1.default.nextNoteTime = audioCtx.currentTime;\n    worker.postMessage('start');\n    store_1.default.playing = true;\n};\nconst handleStop = () => {\n    worker.postMessage('stop');\n    store_1.default.playing = false;\n};\nconst handleChangeWaveform = (e) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = e.currentTarget.value;\n    store_1.default.currentWaveform = value;\n};\nconst handleChangeBpm = (e) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = Number(e.currentTarget.value);\n    if (value < 1 || value > 999) {\n        alert('無効な値です。BPMは1 ~ 999の範囲で指定してください');\n        return;\n    }\n    store_1.default.bpm = value;\n};\nconst handleChangeNoteLength = (e) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = Number(e.currentTarget.value);\n    if (value < 0 || value > 10) {\n        alert('無効な値です。');\n    }\n    store_1.default.noteLength = value;\n};\nconst handleChangeFilterType = (e) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = e.currentTarget.value;\n    store_1.default.currentFilter = value;\n    biquadFilterNode.type = store_1.default.currentFilter;\n};\nconst handleChangeFilterFrequency = (e) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = Number(e.currentTarget.value);\n    if (value < 20 || value > 20000) {\n        alert('無効な値です。');\n        return;\n    }\n    store_1.default.filterFrequency = value;\n    biquadFilterNode.frequency.value = store_1.default.filterFrequency;\n};\nconst handleChangeFilterQ = (e) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = Number(e.currentTarget.value);\n    if (value < 0 || value > 30) {\n        alert('無効な値です。');\n        return;\n    }\n    store_1.default.filterQ = value;\n    biquadFilterNode.Q.value = store_1.default.filterQ;\n};\nconst handleChangeNoteGain = (e, index) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = Number(e.currentTarget.value);\n    if (value < 0 || value > 10) {\n        alert('無効な値です。');\n        return;\n    }\n    store_1.default.noteGain[index] = value;\n};\nconst handleChangePhrase = (e, index) => {\n    if (!(e.currentTarget instanceof HTMLSelectElement))\n        return;\n    const value = e.currentTarget.value;\n    store_1.default.phrase[index] = value;\n};\nconst handleChangePattern = (e, index) => {\n    if (!(e.currentTarget instanceof HTMLInputElement))\n        return;\n    const value = e.currentTarget.checked;\n    const { type } = e.currentTarget.dataset;\n    if (type === 'synth') {\n        store_1.default.synthPattern[index] = value;\n    }\n    if (type === 'kick') {\n        store_1.default.kickPattern[index] = value;\n    }\n    if (type === 'snare') {\n        store_1.default.snarePattern[index] = value;\n    }\n    if (type === 'hihat') {\n        store_1.default.hihatPattern[index] = value;\n    }\n};\n// イベントに関数を割当\nelements_1.initializeButton === null || elements_1.initializeButton === void 0 ? void 0 : elements_1.initializeButton.addEventListener('click', handleInitialize);\nelements_1.startButton === null || elements_1.startButton === void 0 ? void 0 : elements_1.startButton.addEventListener('click', handleStart);\nelements_1.stopButton === null || elements_1.stopButton === void 0 ? void 0 : elements_1.stopButton.addEventListener('click', handleStop);\nelements_1.waveformSelects.forEach((waveformSelect) => {\n    waveformSelect.addEventListener('change', handleChangeWaveform);\n});\nelements_1.bpmInput === null || elements_1.bpmInput === void 0 ? void 0 : elements_1.bpmInput.addEventListener('input', handleChangeBpm);\nelements_1.noteLengthInput === null || elements_1.noteLengthInput === void 0 ? void 0 : elements_1.noteLengthInput.addEventListener('input', handleChangeNoteLength);\nelements_1.filterTypeSelects.forEach((filterTypeSelect) => {\n    filterTypeSelect.addEventListener('change', handleChangeFilterType);\n});\nelements_1.filterFrequencyInput === null || elements_1.filterFrequencyInput === void 0 ? void 0 : elements_1.filterFrequencyInput.addEventListener('input', handleChangeFilterFrequency);\nelements_1.filterQInput === null || elements_1.filterQInput === void 0 ? void 0 : elements_1.filterQInput.addEventListener('input', handleChangeFilterQ);\nelements_1.noteSelects.forEach((noteSelect, index) => {\n    noteSelect.addEventListener('change', (e) => handleChangePhrase(e, index));\n});\nelements_1.noteGainInputs.forEach((noteGainInput, index) => {\n    noteGainInput.addEventListener('input', (e) => handleChangeNoteGain(e, index));\n});\nelements_1.synthPatternSelects.forEach((synthPatternSelect, index) => {\n    synthPatternSelect.addEventListener('change', (e) => handleChangePattern(e, index));\n});\nelements_1.kickPatternSelects.forEach((kickPatternSelect, index) => {\n    kickPatternSelect.addEventListener('change', (e) => handleChangePattern(e, index));\n});\nelements_1.snarePatternSelects.forEach((snarePatternSelect, index) => {\n    snarePatternSelect.addEventListener('change', (e) => handleChangePattern(e, index));\n});\nelements_1.hihatPatternSelects.forEach((hihatPatternSelect, index) => {\n    hihatPatternSelect.addEventListener('change', (e) => handleChangePattern(e, index));\n});\n\n\n//# sourceURL=webpack://koodori/./src/main.ts?");

/***/ }),

/***/ "./src/store.ts":
/*!**********************!*\
  !*** ./src/store.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * 状態管理変数\n */\nconst currentNote = 0;\nconst nextNoteTime = 0;\nconst currentWaveform = 'sawtooth';\nconst currentFilter = 'lowpass';\nconst filterFrequency = 15000; // 15000 ~ 20\nconst filterQ = 10; // 0 ~ 30;\nconst noteLength = 8;\nconst noteGain = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8];\nconst phrase = [\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n    'a2',\n];\nconst synthPattern = [\n    false,\n    false,\n    true,\n    true,\n    false,\n    false,\n    true,\n    true,\n    false,\n    false,\n    true,\n    true,\n    false,\n    false,\n    true,\n    true,\n];\nconst kickPattern = [\n    true,\n    false,\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n];\nconst snarePattern = [\n    false,\n    false,\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n];\nconst hihatPattern = [\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n    true,\n    false,\n    false,\n    false,\n    true,\n    false,\n];\nconst bpm = 128;\nconst initialized = false;\nconst playing = false;\nconst store = {\n    currentNote,\n    nextNoteTime,\n    currentWaveform: currentWaveform,\n    currentFilter: currentFilter,\n    filterFrequency,\n    filterQ,\n    noteLength,\n    noteGain,\n    phrase,\n    synthPattern,\n    kickPattern,\n    snarePattern,\n    hihatPattern,\n    bpm,\n    initialized,\n    playing,\n};\nexports[\"default\"] = store;\n\n\n//# sourceURL=webpack://koodori/./src/store.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pitchNameToFrequency = void 0;\n/**\n * 音名を周波数に変換して返す\n * @param pitchName 音名 (c2 - b4)\n * @returns 周波数\n */\nconst pitchNameToFrequency = (pitchName) => {\n    const table = {\n        c2: 65.406,\n        d2: 73.416,\n        e2: 82.407,\n        f2: 87.307,\n        g2: 97.999,\n        a2: 110,\n        b2: 123.471,\n        c3: 130.813,\n        d3: 146.832,\n        e3: 164.814,\n        f3: 174.614,\n        g3: 195.998,\n        a3: 220,\n        b3: 246.942,\n        c4: 261.626,\n        d4: 293.665,\n        e4: 329.628,\n        f4: 349.228,\n        g4: 391.995,\n        a4: 440,\n        b4: 493.883,\n    };\n    return table[pitchName];\n};\nexports.pitchNameToFrequency = pitchNameToFrequency;\n\n\n//# sourceURL=webpack://koodori/./src/utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;